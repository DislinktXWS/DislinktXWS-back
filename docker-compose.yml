version: "3.8"

services:
  api_gateway:
    image: api_gateway
    container_name: api_gateway
    build:
      context: .
      dockerfile: ./api_gateway/Dockerfile
    volumes:
      - type: bind
        source: ./localhost.crt
        target: /root/localhost.crt
      - type: bind
        source: ./localhost.key
        target: /root/localhost.key
      - type: bind
        source: ./api_gateway/api-gateway.crt
        target: /root/apigateway.crt
    restart: on-failure
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
      - 5000:5000
    environment:
      GATEWAY_PORT: ${GATEWAY_PORT}
      GATEWAY_HOST: ${GATEWAY_HOST}
      USER_SERVICE_HOST: ${USER_SERVICE_HOST}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
      POST_SERVICE_HOST: ${POST_SERVICE_HOST}
      POST_SERVICE_PORT: ${POST_SERVICE_PORT}
      CONNECTION_SERVICE_HOST: ${CONNECTION_SERVICE_HOST}
      CONNECTION_SERVICE_PORT: ${CONNECTION_SERVICE_PORT}
      AUTHENTICATION_SERVICE_HOST: ${AUTHENTICATION_SERVICE_HOST}
      AUTHENTICATION_SERVICE_PORT: ${AUTHENTICATION_SERVICE_PORT}
      BUSINESS_OFFER_SERVICE_HOST: ${BUSINESS_OFFER_SERVICE_HOST}
      BUSINESS_OFFER_SERVICE_PORT: ${BUSINESS_OFFER_SERVICE_PORT}
      NOTIFICATIONS_SERVICE_PORT: ${NOTIFICATIONS_SERVICE_PORT}
      NOTIFICATIONS_SERVICE_HOST: ${NOTIFICATIONS_SERVICE_HOST}
      MESSAGE_SERVICE_HOST: ${MESSAGE_SERVICE_HOST}
      MESSAGE_SERVICE_PORT: ${MESSAGE_SERVICE_PORT}
    networks:
      - network
      - public

  post_service:
    image: post_service
    container_name: post_service
    build:
      context: .
      dockerfile: ./post_service/Dockerfile
    volumes:
      - type: bind
        source: ./post_service/logs/info.log
        target: /root/info.log
      - type: bind
        source: ./post_service/logs/error.log
        target: /root/error.log
      - type: bind
        source: ./post_service/post-service.crt
        target: /root/postservice.crt
      - type: bind
        source: ./post_service/post-service.key
        target: /root/postservice.key
      - type: bind
        source: ./post_service/post-service.csr
        target: /root/postservice.csr
    restart: on-failure
    environment:
      POST_SERVICE_HOST: ${POST_SERVICE_HOST}
      POST_SERVICE_PORT: ${POST_SERVICE_PORT}
      POST_DB_HOST: ${POST_DB_HOST}
      POST_DB_PORT: ${POST_DB_PORT}
      JAEGER_SERVICE_NAME: post-service
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      JAEGER_SAMPLER_MANAGER_HOST_PORT: jaeger:5778
      JAEGER_SAMPLER_TYPE: const
      JAEGER_SAMPLER_PARAM: 1
    depends_on:
      - post_db
      - jaeger
    networks:
      - network
      - public

  user_service:
    image: user_service
    container_name: user_service
    build:
      context: .
      dockerfile: ./user_service/Dockerfile
    volumes:
      - type: bind
        source: ./user_service/logs/info.log
        target: /root/info.log
      - type: bind
        source: ./user_service/logs/error.log
        target: /root/error.log
      - type: bind
        source: ./user_service/user-service.crt
        target: /root/userservice.crt
      - type: bind
        source: ./user_service/user-service.key
        target: /root/userservice.key
      - type: bind
        source: ./user_service/user-service.csr
        target: /root/userservice.csr
    logging:
      driver: fluentd
      options:
        fluentd-address: 127.0.0.1:24224
    restart: on-failure
    environment:
      USER_SERVICE_HOST: ${USER_SERVICE_HOST}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
      USER_DB_HOST: ${USER_DB_HOST}
      USER_DB_PORT: ${USER_DB_PORT}
      JAEGER_SERVICE_NAME: user-service
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      JAEGER_SAMPLER_MANAGER_HOST_PORT: jaeger:5778
      JAEGER_SAMPLER_TYPE: const
      JAEGER_SAMPLER_PARAM: 1
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      INSERT_USER_COMMAND_SUBJECT: ${INSERT_USER_COMMAND_SUBJECT}
      INSERT_USER_REPLY_SUBJECT: ${INSERT_USER_REPLY_SUBJECT}
    depends_on:
      - user_db
      - jaeger
    networks:
      - public
      - network

  message_service:
    image: message_service
    container_name: message_service
    build:
      context: .
      dockerfile: ./message_service/Dockerfile
    restart: on-failure
    logging:
      driver: fluentd
      options:
        fluentd-address: 127.0.0.1:24224
    environment:
      MESSAGE_SERVICE_HOST: ${MESSAGE_SERVICE_HOST}
      MESSAGE_SERVICE_PORT: ${MESSAGE_SERVICE_PORT}
      MESSAGE_DB_HOST: ${MESSAGE_DB_HOST}
      MESSAGE_DB_PORT: ${MESSAGE_DB_PORT}
    depends_on:
      - mess_db
    networks:
      - network
      - public

  authentication_service:
    image: authentication_service
    container_name: authentication_service
    build:
      context: .
      dockerfile: ./authentication_service/Dockerfile
    restart: on-failure
    volumes:
      - type: bind
        source: ./authentication_service/logs/info.log
        target: /root/info.log
      - type: bind
        source: ./authentication_service/logs/error.log
        target: /root/error.log
      - type: bind
        source: ./authentication_service/authentication-service.crt
        target: /root/authenticationservice.crt
      - type: bind
        source: ./authentication_service/authentication-service.key
        target: /root/authenticationservice.key
      - type: bind
        source: ./authentication_service/authentication-service.csr
        target: /root/authenticationservice.csr
    logging:
      driver: fluentd
      options:
        fluentd-address: 127.0.0.1:24224
    environment:
      AUTHENTICATION_SERVICE_HOST: ${AUTHENTICATION_SERVICE_HOST}
      AUTHENTICATION_SERVICE_PORT: ${AUTHENTICATION_SERVICE_PORT}
      AUTH_DB_HOST: ${AUTH_DB_HOST}
      AUTH_DB_PORT: ${AUTH_DB_PORT}
      JAEGER_SERVICE_NAME: authentication-service
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      JAEGER_SAMPLER_MANAGER_HOST_PORT: jaeger:5778
      JAEGER_SAMPLER_TYPE: const
      JAEGER_SAMPLER_PARAM: 1
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      INSERT_USER_COMMAND_SUBJECT: ${INSERT_USER_COMMAND_SUBJECT}
      INSERT_USER_REPLY_SUBJECT: ${INSERT_USER_REPLY_SUBJECT}
    depends_on:
      - auth_db
      - jaeger
    networks:
      - network
      - public


  connection_service:
    image: connection_service
    container_name: connection_service
    build:
      context: .
      dockerfile: ./connection_service/Dockerfile
    volumes:
      - type: bind
        source: ./connection_service/logs/info.log
        target: /root/info.log
      - type: bind
        source: ./connection_service/logs/error.log
        target: /root/error.log
      - type: bind
        source: ./connection_service/connection-service.crt
        target: /root/connectionservice.crt
      - type: bind
        source: ./connection_service/connection-service.key
        target: /root/connectionservice.key
      - type: bind
        source: ./connection_service/connection-service.csr
        target: /root/connectionservice.csr
    logging:
      driver: fluentd
      options:
        fluentd-address: 127.0.0.1:24224
    restart: on-failure
    environment:
        - CONNECTION_DB_HOST=${CONNECTION_DB_HOST}
        - CONNECTION_DB_PORT=${CONNECTION_DB_PORT}
        - CONNECTION_SERVICE_PORT=${CONNECTION_SERVICE_PORT}
        - CONNECTION_SERVICE_HOST=${CONNECTION_SERVICE_HOST}
        - CONNECTION_DB_USER=${CONNECTION_DB_USER}
        - CONNECTION_DB_PASS=${CONNECTION_DB_PASS}
        - NATS_HOST=${NATS_HOST}
        - NATS_PORT=${NATS_PORT}
        - NATS_USER=${NATS_USER}
        - NATS_PASS=${NATS_PASS}
        - INSERT_USER_COMMAND_SUBJECT=${INSERT_USER_COMMAND_SUBJECT}
        - INSERT_USER_REPLY_SUBJECT=${INSERT_USER_REPLY_SUBJECT}
        - JAEGER_SERVICE_NAME= connection-service
        - JAEGER_AGENT_HOST=${JAEGER_AGENT_HOST}
        - JAEGER_AGENT_PORT=${JAEGER_AGENT_PORT}
        - JAEGER_SAMPLER_MANAGER_HOST_PORT=${JAEGER_SAMPLER_MANAGER_HOST_PORT}
        - JAEGER_SAMPLER_TYPE=${JAEGER_SAMPLER_TYPE}
        - JAEGER_SAMPLER_PARAM=${JAEGER_SAMPLER_PARAM}
    depends_on:
      - neo4j
      - jaeger
    networks:
      - network
      - public

  business_offer_service:
    image: business_offer_service
    container_name: business_offer_service
    build:
      context: .
      dockerfile: ./business_offer_service/Dockerfile
    restart: on-failure
    volumes:
      - type: bind
        source: ./business_offer_service/logs/info.log
        target: /root/info.log
      - type: bind
        source: ./business_offer_service/logs/error.log
        target: /root/error.log
      - type: bind
        source: ./business_offer_service/business-offer-service.crt
        target: /root/businessofferservice.crt
      - type: bind
        source: ./business_offer_service/business-offer-service.key
        target: /root/businessofferservice.key
      - type: bind
        source: ./business_offer_service/business-offer-service.csr
        target: /root/businessofferservice.csr
    logging:
      driver: fluentd
      options:
        fluentd-address: 127.0.0.1:24224
    environment:
      - BUSINESS_OFFER_DB_HOST=${BUSINESS_OFFER_DB_HOST}
      - BUSINESS_OFFER_DB_PORT=${BUSINESS_OFFER_DB_PORT}
      - BUSINESS_OFFER_SERVICE_HOST=${BUSINESS_OFFER_SERVICE_HOST}
      - BUSINESS_OFFER_SERVICE_PORT=${BUSINESS_OFFER_SERVICE_PORT}
      - BUSINESS_OFFER_DB_USER=${BUSINESS_OFFER_DB_USER}
      - BUSINESS_OFFER_DB_PASS=${BUSINESS_OFFER_DB_PASS}
      - JAEGER_SERVICE_NAME=business-offer-service
      - JAEGER_AGENT_HOST=${JAEGER_AGENT_HOST}
      - JAEGER_AGENT_PORT=${JAEGER_AGENT_PORT}
      - JAEGER_SAMPLER_MANAGER_HOST_PORT=${JAEGER_SAMPLER_MANAGER_HOST_PORT}
      - JAEGER_SAMPLER_TYPE=${JAEGER_SAMPLER_TYPE}
      - JAEGER_SAMPLER_PARAM=${JAEGER_SAMPLER_PARAM}
    depends_on:
      - neo4jA
      - jaeger
    networks:
      - network
      - public

  notifications_service:
    image: notifications_service
    container_name: notifications_service
    build:
      context: .
      dockerfile: ./notifications_service/Dockerfile
    restart: on-failure
    environment:
      NOTIFICATIONS_SERVICE_HOST: ${NOTIFICATIONS_SERVICE_HOST}
      NOTIFICATIONS_SERVICE_PORT: ${NOTIFICATIONS_SERVICE_PORT}
      NOTIFICATIONS_DB_HOST: ${NOTIFICATIONS_DB_HOST}
      NOTIFICATIONS_DB_PORT: ${NOTIFICATIONS_DB_PORT}
    depends_on:
      - notifications_db
    networks:
      - network
      - public

  user_db:
    image: mongo
    container_name: user_db
    restart: on-failure
    networks:
      - network

  post_db:
    image: mongo
    container_name: post_db
    restart: on-failure
    networks:
      - network

  mess_db:
    image: mongo
    container_name: mess_db
    restart: on-failure
    networks:
      - network

  auth_db:
    image: mongo
    container_name: auth_db
    restart: on-failure
    networks:
      - network

  neo4j:
    image: neo4j:4.3.3-community
    container_name: neo4j
    ports:
      - "27474:7474"
      - "27687:7687"
    networks:
      - network
    environment:
      - NEO4J_AUTH=none
      - NEO4J_dbms_memory_pagecache_size=512M

  neo4jA:
    image: neo4j:4.3.3-community
    container_name: neo4jA
    ports:
      - "7474:7474"
      - "7687:7687"
    networks:
      - network
    environment:
      - NEO4J_AUTH=none
      - NEO4J_dbms_memory_pagecache_size=512M

  notifications_db:
    image: mongo
    container_name: notifications_db
    restart: on-failure
    networks:
      - network

  nats:
    image: nats
    container_name: nats
    restart: on-failure
    networks:
      - network

  jaeger:
    image: jaegertracing/all-in-one
    container_name: jaeger
    ports:
      - "6831:6831/udp"
      - "16686:16686"
    networks:
      - public

  prometheus:
    image: prom/prometheus:v2.35.0
    restart: on-failure
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus:/var/lib/prometheus
    depends_on:
      - api_gateway
    networks:
      - public

  node-exporter:
    image: prom/node-exporter:v1.1.2
    ports:
      - "9100:9100"
    networks:
      - public

  cadvisor:
    image: google/cadvisor:v0.33.0
    ports:
       - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - public

volumes:
  prometheus:
    name: prometheus

networks:
  network:
    driver: bridge
  public:
    name: public