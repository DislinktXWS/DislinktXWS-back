// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: common/proto/connection_service/connection_service.proto

package connections

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConnectionsServiceClient is the client API for ConnectionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectionsServiceClient interface {
	InsertNewUser(ctx context.Context, in *InsertUserRequest, opts ...grpc.CallOption) (*InsertUserResponse, error)
	InsertUserConnection(ctx context.Context, in *InsertUserConnectionRequest, opts ...grpc.CallOption) (*InsertUserConnectionResponse, error)
	DeleteUserConnection(ctx context.Context, in *InsertUserConnectionRequest, opts ...grpc.CallOption) (*InsertUserConnectionResponse, error)
	InsertConnectionRequest(ctx context.Context, in *InsertUserConnectionRequest, opts ...grpc.CallOption) (*InsertUserConnectionResponse, error)
	CancelConnectionRequest(ctx context.Context, in *InsertUserConnectionRequest, opts ...grpc.CallOption) (*InsertUserConnectionResponse, error)
	BlockUser(ctx context.Context, in *InsertUserConnectionRequest, opts ...grpc.CallOption) (*InsertUserConnectionResponse, error)
	UnblockUser(ctx context.Context, in *InsertUserConnectionRequest, opts ...grpc.CallOption) (*InsertUserConnectionResponse, error)
	AcceptConnectionRequest(ctx context.Context, in *InsertUserConnectionRequest, opts ...grpc.CallOption) (*InsertUserConnectionResponse, error)
	DeclineConnectionRequest(ctx context.Context, in *InsertUserConnectionRequest, opts ...grpc.CallOption) (*InsertUserConnectionResponse, error)
	GetAll(ctx context.Context, in *GetAllConnectionsRequest, opts ...grpc.CallOption) (*GetAllConnectionsResponse, error)
	GetBlockedUsers(ctx context.Context, in *GetAllConnectionsRequest, opts ...grpc.CallOption) (*GetAllConnectionsResponse, error)
	GetConnectionRequests(ctx context.Context, in *GetAllConnectionsRequest, opts ...grpc.CallOption) (*GetAllConnectionsResponse, error)
	GetConnectionStatus(ctx context.Context, in *ConnectionStatusRequest, opts ...grpc.CallOption) (*ConnectionStatusResponse, error)
}

type connectionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectionsServiceClient(cc grpc.ClientConnInterface) ConnectionsServiceClient {
	return &connectionsServiceClient{cc}
}

func (c *connectionsServiceClient) InsertNewUser(ctx context.Context, in *InsertUserRequest, opts ...grpc.CallOption) (*InsertUserResponse, error) {
	out := new(InsertUserResponse)
	err := c.cc.Invoke(ctx, "/connections.ConnectionsService/InsertNewUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionsServiceClient) InsertUserConnection(ctx context.Context, in *InsertUserConnectionRequest, opts ...grpc.CallOption) (*InsertUserConnectionResponse, error) {
	out := new(InsertUserConnectionResponse)
	err := c.cc.Invoke(ctx, "/connections.ConnectionsService/InsertUserConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionsServiceClient) DeleteUserConnection(ctx context.Context, in *InsertUserConnectionRequest, opts ...grpc.CallOption) (*InsertUserConnectionResponse, error) {
	out := new(InsertUserConnectionResponse)
	err := c.cc.Invoke(ctx, "/connections.ConnectionsService/DeleteUserConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionsServiceClient) InsertConnectionRequest(ctx context.Context, in *InsertUserConnectionRequest, opts ...grpc.CallOption) (*InsertUserConnectionResponse, error) {
	out := new(InsertUserConnectionResponse)
	err := c.cc.Invoke(ctx, "/connections.ConnectionsService/InsertConnectionRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionsServiceClient) CancelConnectionRequest(ctx context.Context, in *InsertUserConnectionRequest, opts ...grpc.CallOption) (*InsertUserConnectionResponse, error) {
	out := new(InsertUserConnectionResponse)
	err := c.cc.Invoke(ctx, "/connections.ConnectionsService/CancelConnectionRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionsServiceClient) BlockUser(ctx context.Context, in *InsertUserConnectionRequest, opts ...grpc.CallOption) (*InsertUserConnectionResponse, error) {
	out := new(InsertUserConnectionResponse)
	err := c.cc.Invoke(ctx, "/connections.ConnectionsService/BlockUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionsServiceClient) UnblockUser(ctx context.Context, in *InsertUserConnectionRequest, opts ...grpc.CallOption) (*InsertUserConnectionResponse, error) {
	out := new(InsertUserConnectionResponse)
	err := c.cc.Invoke(ctx, "/connections.ConnectionsService/UnblockUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionsServiceClient) AcceptConnectionRequest(ctx context.Context, in *InsertUserConnectionRequest, opts ...grpc.CallOption) (*InsertUserConnectionResponse, error) {
	out := new(InsertUserConnectionResponse)
	err := c.cc.Invoke(ctx, "/connections.ConnectionsService/AcceptConnectionRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionsServiceClient) DeclineConnectionRequest(ctx context.Context, in *InsertUserConnectionRequest, opts ...grpc.CallOption) (*InsertUserConnectionResponse, error) {
	out := new(InsertUserConnectionResponse)
	err := c.cc.Invoke(ctx, "/connections.ConnectionsService/DeclineConnectionRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionsServiceClient) GetAll(ctx context.Context, in *GetAllConnectionsRequest, opts ...grpc.CallOption) (*GetAllConnectionsResponse, error) {
	out := new(GetAllConnectionsResponse)
	err := c.cc.Invoke(ctx, "/connections.ConnectionsService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionsServiceClient) GetBlockedUsers(ctx context.Context, in *GetAllConnectionsRequest, opts ...grpc.CallOption) (*GetAllConnectionsResponse, error) {
	out := new(GetAllConnectionsResponse)
	err := c.cc.Invoke(ctx, "/connections.ConnectionsService/GetBlockedUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionsServiceClient) GetConnectionRequests(ctx context.Context, in *GetAllConnectionsRequest, opts ...grpc.CallOption) (*GetAllConnectionsResponse, error) {
	out := new(GetAllConnectionsResponse)
	err := c.cc.Invoke(ctx, "/connections.ConnectionsService/GetConnectionRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionsServiceClient) GetConnectionStatus(ctx context.Context, in *ConnectionStatusRequest, opts ...grpc.CallOption) (*ConnectionStatusResponse, error) {
	out := new(ConnectionStatusResponse)
	err := c.cc.Invoke(ctx, "/connections.ConnectionsService/GetConnectionStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectionsServiceServer is the server API for ConnectionsService service.
// All implementations must embed UnimplementedConnectionsServiceServer
// for forward compatibility
type ConnectionsServiceServer interface {
	InsertNewUser(context.Context, *InsertUserRequest) (*InsertUserResponse, error)
	InsertUserConnection(context.Context, *InsertUserConnectionRequest) (*InsertUserConnectionResponse, error)
	DeleteUserConnection(context.Context, *InsertUserConnectionRequest) (*InsertUserConnectionResponse, error)
	InsertConnectionRequest(context.Context, *InsertUserConnectionRequest) (*InsertUserConnectionResponse, error)
	CancelConnectionRequest(context.Context, *InsertUserConnectionRequest) (*InsertUserConnectionResponse, error)
	BlockUser(context.Context, *InsertUserConnectionRequest) (*InsertUserConnectionResponse, error)
	UnblockUser(context.Context, *InsertUserConnectionRequest) (*InsertUserConnectionResponse, error)
	AcceptConnectionRequest(context.Context, *InsertUserConnectionRequest) (*InsertUserConnectionResponse, error)
	DeclineConnectionRequest(context.Context, *InsertUserConnectionRequest) (*InsertUserConnectionResponse, error)
	GetAll(context.Context, *GetAllConnectionsRequest) (*GetAllConnectionsResponse, error)
	GetBlockedUsers(context.Context, *GetAllConnectionsRequest) (*GetAllConnectionsResponse, error)
	GetConnectionRequests(context.Context, *GetAllConnectionsRequest) (*GetAllConnectionsResponse, error)
	GetConnectionStatus(context.Context, *ConnectionStatusRequest) (*ConnectionStatusResponse, error)
	mustEmbedUnimplementedConnectionsServiceServer()
}

// UnimplementedConnectionsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConnectionsServiceServer struct {
}

func (UnimplementedConnectionsServiceServer) InsertNewUser(context.Context, *InsertUserRequest) (*InsertUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertNewUser not implemented")
}
func (UnimplementedConnectionsServiceServer) InsertUserConnection(context.Context, *InsertUserConnectionRequest) (*InsertUserConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertUserConnection not implemented")
}
func (UnimplementedConnectionsServiceServer) DeleteUserConnection(context.Context, *InsertUserConnectionRequest) (*InsertUserConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserConnection not implemented")
}
func (UnimplementedConnectionsServiceServer) InsertConnectionRequest(context.Context, *InsertUserConnectionRequest) (*InsertUserConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertConnectionRequest not implemented")
}
func (UnimplementedConnectionsServiceServer) CancelConnectionRequest(context.Context, *InsertUserConnectionRequest) (*InsertUserConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelConnectionRequest not implemented")
}
func (UnimplementedConnectionsServiceServer) BlockUser(context.Context, *InsertUserConnectionRequest) (*InsertUserConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUser not implemented")
}
func (UnimplementedConnectionsServiceServer) UnblockUser(context.Context, *InsertUserConnectionRequest) (*InsertUserConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockUser not implemented")
}
func (UnimplementedConnectionsServiceServer) AcceptConnectionRequest(context.Context, *InsertUserConnectionRequest) (*InsertUserConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptConnectionRequest not implemented")
}
func (UnimplementedConnectionsServiceServer) DeclineConnectionRequest(context.Context, *InsertUserConnectionRequest) (*InsertUserConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclineConnectionRequest not implemented")
}
func (UnimplementedConnectionsServiceServer) GetAll(context.Context, *GetAllConnectionsRequest) (*GetAllConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedConnectionsServiceServer) GetBlockedUsers(context.Context, *GetAllConnectionsRequest) (*GetAllConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockedUsers not implemented")
}
func (UnimplementedConnectionsServiceServer) GetConnectionRequests(context.Context, *GetAllConnectionsRequest) (*GetAllConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectionRequests not implemented")
}
func (UnimplementedConnectionsServiceServer) GetConnectionStatus(context.Context, *ConnectionStatusRequest) (*ConnectionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectionStatus not implemented")
}
func (UnimplementedConnectionsServiceServer) mustEmbedUnimplementedConnectionsServiceServer() {}

// UnsafeConnectionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectionsServiceServer will
// result in compilation errors.
type UnsafeConnectionsServiceServer interface {
	mustEmbedUnimplementedConnectionsServiceServer()
}

func RegisterConnectionsServiceServer(s grpc.ServiceRegistrar, srv ConnectionsServiceServer) {
	s.RegisterService(&ConnectionsService_ServiceDesc, srv)
}

func _ConnectionsService_InsertNewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionsServiceServer).InsertNewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.ConnectionsService/InsertNewUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionsServiceServer).InsertNewUser(ctx, req.(*InsertUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionsService_InsertUserConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertUserConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionsServiceServer).InsertUserConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.ConnectionsService/InsertUserConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionsServiceServer).InsertUserConnection(ctx, req.(*InsertUserConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionsService_DeleteUserConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertUserConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionsServiceServer).DeleteUserConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.ConnectionsService/DeleteUserConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionsServiceServer).DeleteUserConnection(ctx, req.(*InsertUserConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionsService_InsertConnectionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertUserConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionsServiceServer).InsertConnectionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.ConnectionsService/InsertConnectionRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionsServiceServer).InsertConnectionRequest(ctx, req.(*InsertUserConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionsService_CancelConnectionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertUserConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionsServiceServer).CancelConnectionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.ConnectionsService/CancelConnectionRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionsServiceServer).CancelConnectionRequest(ctx, req.(*InsertUserConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionsService_BlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertUserConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionsServiceServer).BlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.ConnectionsService/BlockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionsServiceServer).BlockUser(ctx, req.(*InsertUserConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionsService_UnblockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertUserConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionsServiceServer).UnblockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.ConnectionsService/UnblockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionsServiceServer).UnblockUser(ctx, req.(*InsertUserConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionsService_AcceptConnectionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertUserConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionsServiceServer).AcceptConnectionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.ConnectionsService/AcceptConnectionRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionsServiceServer).AcceptConnectionRequest(ctx, req.(*InsertUserConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionsService_DeclineConnectionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertUserConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionsServiceServer).DeclineConnectionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.ConnectionsService/DeclineConnectionRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionsServiceServer).DeclineConnectionRequest(ctx, req.(*InsertUserConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionsService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionsServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.ConnectionsService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionsServiceServer).GetAll(ctx, req.(*GetAllConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionsService_GetBlockedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionsServiceServer).GetBlockedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.ConnectionsService/GetBlockedUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionsServiceServer).GetBlockedUsers(ctx, req.(*GetAllConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionsService_GetConnectionRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionsServiceServer).GetConnectionRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.ConnectionsService/GetConnectionRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionsServiceServer).GetConnectionRequests(ctx, req.(*GetAllConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionsService_GetConnectionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionsServiceServer).GetConnectionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connections.ConnectionsService/GetConnectionStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionsServiceServer).GetConnectionStatus(ctx, req.(*ConnectionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectionsService_ServiceDesc is the grpc.ServiceDesc for ConnectionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "connections.ConnectionsService",
	HandlerType: (*ConnectionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertNewUser",
			Handler:    _ConnectionsService_InsertNewUser_Handler,
		},
		{
			MethodName: "InsertUserConnection",
			Handler:    _ConnectionsService_InsertUserConnection_Handler,
		},
		{
			MethodName: "DeleteUserConnection",
			Handler:    _ConnectionsService_DeleteUserConnection_Handler,
		},
		{
			MethodName: "InsertConnectionRequest",
			Handler:    _ConnectionsService_InsertConnectionRequest_Handler,
		},
		{
			MethodName: "CancelConnectionRequest",
			Handler:    _ConnectionsService_CancelConnectionRequest_Handler,
		},
		{
			MethodName: "BlockUser",
			Handler:    _ConnectionsService_BlockUser_Handler,
		},
		{
			MethodName: "UnblockUser",
			Handler:    _ConnectionsService_UnblockUser_Handler,
		},
		{
			MethodName: "AcceptConnectionRequest",
			Handler:    _ConnectionsService_AcceptConnectionRequest_Handler,
		},
		{
			MethodName: "DeclineConnectionRequest",
			Handler:    _ConnectionsService_DeclineConnectionRequest_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _ConnectionsService_GetAll_Handler,
		},
		{
			MethodName: "GetBlockedUsers",
			Handler:    _ConnectionsService_GetBlockedUsers_Handler,
		},
		{
			MethodName: "GetConnectionRequests",
			Handler:    _ConnectionsService_GetConnectionRequests_Handler,
		},
		{
			MethodName: "GetConnectionStatus",
			Handler:    _ConnectionsService_GetConnectionStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/proto/connection_service/connection_service.proto",
}
