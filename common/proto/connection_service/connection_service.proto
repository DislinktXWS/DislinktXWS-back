syntax = "proto3";

option go_package = "module/common/connections";

package connections;

import "google/api/annotations.proto";


service ConnectionsService{

    //ova prva ne bi trebalo da se koristi kasnije ali zbog provjere, jer kao okida u dr servisu registracijom

    rpc InsertNewUser(InsertUserRequest) returns (InsertUserResponse) {
        option (google.api.http) = {
                post: "/connections/user"
                body: "user"
        };
    }

    rpc InsertUserConnection(InsertUserConnectionRequest) returns (InsertUserConnectionResponse) {
        option (google.api.http) = {
                post: "/connections/connection"
                body: "connection"
        };
    }

    rpc InsertConnectionRequest(InsertUserConnectionRequest) returns (InsertUserConnectionResponse) {
        option (google.api.http) = {
                post: "/connections/connection/request"
                body: "connection"
        };
    }

    rpc BlockUser(InsertUserConnectionRequest) returns (InsertUserConnectionResponse) {
        option (google.api.http) = {
                post: "/connections/connection/block"
                body: "connection"
        };
    }

    rpc UnblockUser(InsertUserConnectionRequest) returns (InsertUserConnectionResponse) {
        option (google.api.http) = {
                post: "/connections/connection/unblock"
                body: "connection"
        };
    }

    rpc AcceptConnectionRequest(InsertUserConnectionRequest) returns (InsertUserConnectionResponse) {
        option (google.api.http) = {
                post: "/connections/connection/accept"
                body: "connection"
        };
    }

    rpc DeclineConnectionRequest(InsertUserConnectionRequest) returns (InsertUserConnectionResponse) {
        option (google.api.http) = {
                post: "/connections/connection/decline"
                body: "connection"
        };
    }

    rpc GetAll(GetAllConnectionsRequest) returns(GetAllConnectionsResponse) {
        	option (google.api.http) = {
			get: "/connections/{id}"
		};
    }
    rpc GetBlockedUsers(GetAllConnectionsRequest) returns(GetAllConnectionsResponse) {
        option (google.api.http) = {
        get: "/connections/connections/blocked/{id}"
        };
    }
    rpc GetConnectionRequests(GetAllConnectionsRequest) returns(GetAllConnectionsResponse) {
        option (google.api.http) = {
        get: "/connections/connections/requests/{id}"
        };
    }
    rpc GetConnectionStatus(ConnectionStatusRequest) returns(ConnectionStatusResponse) {
        option (google.api.http) = {
        get: "/connections/connection/status/{id1}/{id2}"
        };
    }
}

message InsertUserRequest {
        string user = 1;
}

message InsertUserResponse {
}

message InsertUserConnectionRequest {
    UserConnection connection = 1;
}

message InsertUserConnectionResponse {
}

message GetAllConnectionsRequest {
    string id = 1;
}

message GetAllConnectionsResponse {
    repeated string ids = 1;
}

message ConnectionStatusResponse{
    ConnectionStatusEnum status = 1;
}

message ConnectionStatusRequest{
    string id1 = 1;
    string id2 = 2;
}


message UserConnection {
        string connecting = 1;
        string connected = 2;
}

enum ConnectionStatusEnum {
    connected = 0;
    connectionRequestedByYou = 1;
    connectionRequestedByUser= 2;
    blockedYou = 3;
    blockedByYou = 4;
    none=5;
}
